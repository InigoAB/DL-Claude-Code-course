<?xml version="1.0" encoding="utf-8"?><testsuites name="pytest tests"><testsuite name="pytest" errors="0" failures="30" skipped="0" tests="114" time="5.426" timestamp="2025-08-26T13:21:23.877902+02:00" hostname="MBP-011"><testcase classname="tests.test_ai_generator.TestAIGenerator" name="test_init_with_valid_credentials" time="0.028" /><testcase classname="tests.test_ai_generator.TestAIGenerator" name="test_generate_response_without_tools" time="0.001" /><testcase classname="tests.test_ai_generator.TestAIGenerator" name="test_generate_response_with_conversation_history" time="0.000" /><testcase classname="tests.test_ai_generator.TestAIGenerator" name="test_generate_response_with_tools_no_tool_use" time="0.000" /><testcase classname="tests.test_ai_generator.TestAIGenerator" name="test_generate_response_with_tool_use" time="0.000" /><testcase classname="tests.test_ai_generator.TestAIGenerator" name="test_generate_response_tool_execution_error" time="0.000" /><testcase classname="tests.test_ai_generator.TestAIGenerator" name="test_api_error_handling" time="0.000" /><testcase classname="tests.test_ai_generator.TestAIGenerator" name="test_invalid_api_key_handling" time="0.000" /><testcase classname="tests.test_ai_generator.TestAIGenerator" name="test_empty_api_key" time="0.000" /><testcase classname="tests.test_ai_generator.TestAIGenerator" name="test_multiple_tool_calls" time="0.001" /><testcase classname="tests.test_ai_generator.TestAIGenerator" name="test_system_prompt_content" time="0.007" /><testcase classname="tests.test_ai_generator.TestAIGenerator" name="test_base_params_structure" time="0.000" /><testcase classname="tests.test_ai_generator.TestAIGenerator" name="test_handle_tool_execution_message_building" time="0.000" /><testcase classname="tests.test_ai_generator_enhanced.TestAIGeneratorToolCallingEdgeCases" name="test_empty_tool_response_handling" time="0.000" /><testcase classname="tests.test_ai_generator_enhanced.TestAIGeneratorToolCallingEdgeCases" name="test_tool_manager_none_handling" time="0.000" /><testcase classname="tests.test_ai_generator_enhanced.TestAIGeneratorToolCallingEdgeCases" name="test_malformed_tool_response" time="0.000" /><testcase classname="tests.test_ai_generator_enhanced.TestAIGeneratorToolCallingEdgeCases" name="test_tool_execution_exception" time="0.000" /><testcase classname="tests.test_ai_generator_enhanced.TestAIGeneratorToolCallingEdgeCases" name="test_api_timeout_handling" time="0.000" /><testcase classname="tests.test_ai_generator_enhanced.TestAIGeneratorToolCallingEdgeCases" name="test_api_rate_limit_handling" time="0.000" /><testcase classname="tests.test_ai_generator_enhanced.TestAIGeneratorToolCallingEdgeCases" name="test_invalid_tool_name_in_response" time="0.001" /><testcase classname="tests.test_ai_generator_enhanced.TestAIGeneratorToolCallingEdgeCases" name="test_empty_conversation_history" time="0.000" /><testcase classname="tests.test_ai_generator_enhanced.TestAIGeneratorToolCallingEdgeCases" name="test_very_long_conversation_history" time="0.000" /><testcase classname="tests.test_ai_generator_enhanced.TestAIGeneratorToolCallingEdgeCases" name="test_tool_input_parameter_validation" time="0.000" /><testcase classname="tests.test_ai_generator_enhanced.TestAIGeneratorToolCallingEdgeCases" name="test_system_prompt_completeness" time="0.006" /><testcase classname="tests.test_ai_generator_enhanced.TestAIGeneratorToolCallingEdgeCases" name="test_concurrent_tool_calls_handling" time="0.000" /><testcase classname="tests.test_integration_real.TestRealIntegrationIssues" name="test_config_max_results_bug" time="0.001"><failure message="AssertionError: MAX_RESULTS=0 will cause all searches to return empty results!&#10;assert 0 != 0&#10; +  where 0 = Config(ANTHROPIC_API_KEY='test-key', ANTHROPIC_MODEL='claude-sonnet-4-20250514', EMBEDDING_MODEL='all-MiniLM-L6-v2', CHUNK_SIZE=800, CHUNK_OVERLAP=100, MAX_RESULTS=0, MAX_HISTORY=2, CHROMA_PATH='/var/folders/cd/sffrtsds7ng1hkcbr01d68x00000gp/T/tmpku8kc3uk').MAX_RESULTS">self = &lt;tests.test_integration_real.TestRealIntegrationIssues object at 0x12feefc50&gt;
real_config = Config(ANTHROPIC_API_KEY='test-key', ANTHROPIC_MODEL='claude-sonnet-4-20250514', EMBEDDING_MODEL='all-MiniLM-L6-v2', C..._OVERLAP=100, MAX_RESULTS=0, MAX_HISTORY=2, CHROMA_PATH='/var/folders/cd/sffrtsds7ng1hkcbr01d68x00000gp/T/tmpku8kc3uk')

    def test_config_max_results_bug(self, real_config):
        """Test reveals the MAX_RESULTS=0 configuration bug"""
        # This test should FAIL with current config
&gt;       assert real_config.MAX_RESULTS != 0, "MAX_RESULTS=0 will cause all searches to return empty results!"
E       AssertionError: MAX_RESULTS=0 will cause all searches to return empty results!
E       assert 0 != 0
E        +  where 0 = Config(ANTHROPIC_API_KEY='test-key', ANTHROPIC_MODEL='claude-sonnet-4-20250514', EMBEDDING_MODEL='all-MiniLM-L6-v2', CHUNK_SIZE=800, CHUNK_OVERLAP=100, MAX_RESULTS=0, MAX_HISTORY=2, CHROMA_PATH='/var/folders/cd/sffrtsds7ng1hkcbr01d68x00000gp/T/tmpku8kc3uk').MAX_RESULTS

tests/test_integration_real.py:82: AssertionError</failure></testcase><testcase classname="tests.test_integration_real.TestRealIntegrationIssues" name="test_vector_store_real_search_empty_results" time="2.491"><failure message="AssertionError: Search returned empty results due to MAX_RESULTS=0 bug!&#10;assert not True&#10; +  where True = is_empty()&#10; +    where is_empty = SearchResults(documents=[], metadata=[], distances=[], error='Search error: Number of requested results 0, cannot be negative, or zero. in query.').is_empty">self = &lt;tests.test_integration_real.TestRealIntegrationIssues object at 0x138194190&gt;
real_config = Config(ANTHROPIC_API_KEY='test-key', ANTHROPIC_MODEL='claude-sonnet-4-20250514', EMBEDDING_MODEL='all-MiniLM-L6-v2', C..._OVERLAP=100, MAX_RESULTS=0, MAX_HISTORY=2, CHROMA_PATH='/var/folders/cd/sffrtsds7ng1hkcbr01d68x00000gp/T/tmpigcru5i3')
sample_course_data = (Course(title='Test Course', course_link='https://example.com/course', instructor='Test Instructor', lessons=[Lesson(l...cations of AI in real-world scenarios and case studies.', course_title='Test Course', lesson_number=2, chunk_index=2)])

    def test_vector_store_real_search_empty_results(self, real_config, sample_course_data):
        """Test vector store with real ChromaDB - should reveal MAX_RESULTS=0 issue"""
        course, chunks = sample_course_data
    
        # Create real vector store
        vector_store = VectorStore(
            real_config.CHROMA_PATH,
            real_config.EMBEDDING_MODEL,
            real_config.MAX_RESULTS
        )
    
        # Add real data
        vector_store.add_course_metadata(course)
        vector_store.add_course_content(chunks)
    
        # Search should return results, but will fail due to MAX_RESULTS=0
        results = vector_store.search("machine learning")
    
        if real_config.MAX_RESULTS == 0:
            # This will fail - reveals the bug!
&gt;           assert not results.is_empty(), "Search returned empty results due to MAX_RESULTS=0 bug!"
E           AssertionError: Search returned empty results due to MAX_RESULTS=0 bug!
E           assert not True
E            +  where True = is_empty()
E            +    where is_empty = SearchResults(documents=[], metadata=[], distances=[], error='Search error: Number of requested results 0, cannot be negative, or zero. in query.').is_empty

tests/test_integration_real.py:104: AssertionError</failure></testcase><testcase classname="tests.test_integration_real.TestRealIntegrationIssues" name="test_course_search_tool_real_execution" time="0.081" /><testcase classname="tests.test_integration_real.TestRealIntegrationIssues" name="test_course_search_tool_with_fixed_config" time="0.091" /><testcase classname="tests.test_integration_real.TestRealIntegrationIssues" name="test_ai_generator_tool_calling_real_flow" time="0.074"><failure message="AssertionError: Tool should return empty due to MAX_RESULTS=0&#10;assert 'No relevant content found' in 'Search error: Number of requested results 0, cannot be negative, or zero. in query.'">self = &lt;tests.test_integration_real.TestRealIntegrationIssues object at 0x13808f650&gt;
mock_anthropic = &lt;MagicMock name='Anthropic' id='5320243392'&gt;
real_config = Config(ANTHROPIC_API_KEY='test-key', ANTHROPIC_MODEL='claude-sonnet-4-20250514', EMBEDDING_MODEL='all-MiniLM-L6-v2', C..._OVERLAP=100, MAX_RESULTS=0, MAX_HISTORY=2, CHROMA_PATH='/var/folders/cd/sffrtsds7ng1hkcbr01d68x00000gp/T/tmpsrof62bq')
sample_course_data = (Course(title='Test Course', course_link='https://example.com/course', instructor='Test Instructor', lessons=[Lesson(l...cations of AI in real-world scenarios and case studies.', course_title='Test Course', lesson_number=2, chunk_index=2)])

    @patch('ai_generator.anthropic.Anthropic')
    def test_ai_generator_tool_calling_real_flow(self, mock_anthropic, real_config, sample_course_data):
        """Test AI generator tool calling with real tools and real vector store"""
        course, chunks = sample_course_data
    
        # Create real components
        vector_store = VectorStore(
            real_config.CHROMA_PATH,
            real_config.EMBEDDING_MODEL,
            real_config.MAX_RESULTS
        )
        vector_store.add_course_metadata(course)
        vector_store.add_course_content(chunks)
    
        # Create real tool manager with real search tool
        tool_manager = ToolManager()
        search_tool = CourseSearchTool(vector_store)
        tool_manager.register_tool(search_tool)
    
        # Mock anthropic responses
        mock_tool_response = Mock()
        mock_tool_response.stop_reason = "tool_use"
        mock_tool_block = Mock()
        mock_tool_block.type = "tool_use"
        mock_tool_block.name = "search_course_content"
        mock_tool_block.input = {"query": "machine learning"}
        mock_tool_block.id = "tool_123"
        mock_tool_response.content = [mock_tool_block]
    
        mock_final_response = Mock()
        mock_final_response.content = [Mock(text="Based on the search results, machine learning is...")]
    
        mock_client = Mock()
        mock_client.messages.create.side_effect = [mock_tool_response, mock_final_response]
        mock_anthropic.return_value = mock_client
    
        # Test AI generator with real tools
        ai_generator = AIGenerator("test-key", "claude-sonnet-4-20250514")
    
        result = ai_generator.generate_response(
            "What is machine learning?",
            tools=tool_manager.get_tool_definitions(),
            tool_manager=tool_manager
        )
    
        if real_config.MAX_RESULTS == 0:
            # With MAX_RESULTS=0, the search tool returns empty results
            # AI will get "No relevant content found" from the tool
            tool_result = tool_manager.execute_tool("search_course_content", query="machine learning")
&gt;           assert "No relevant content found" in tool_result, "Tool should return empty due to MAX_RESULTS=0"
E           AssertionError: Tool should return empty due to MAX_RESULTS=0
E           assert 'No relevant content found' in 'Search error: Number of requested results 0, cannot be negative, or zero. in query.'

tests/test_integration_real.py:210: AssertionError</failure></testcase><testcase classname="tests.test_integration_real.TestRealIntegrationIssues" name="test_rag_system_end_to_end_real_flow" time="0.077" /><testcase classname="tests.test_integration_real.TestRealIntegrationIssues" name="test_empty_chromadb_behavior" time="0.010"><failure message="AssertionError: assert 'No relevant content found' in 'Search error: Number of requested results 0, cannot be negative, or zero. in query.'">self = &lt;tests.test_integration_real.TestRealIntegrationIssues object at 0x12ff5f790&gt;
real_config = Config(ANTHROPIC_API_KEY='test-key', ANTHROPIC_MODEL='claude-sonnet-4-20250514', EMBEDDING_MODEL='all-MiniLM-L6-v2', C..._OVERLAP=100, MAX_RESULTS=0, MAX_HISTORY=2, CHROMA_PATH='/var/folders/cd/sffrtsds7ng1hkcbr01d68x00000gp/T/tmp63mjfvp0')

    def test_empty_chromadb_behavior(self, real_config):
        """Test behavior with empty ChromaDB"""
        vector_store = VectorStore(
            real_config.CHROMA_PATH,
            real_config.EMBEDDING_MODEL,
            real_config.MAX_RESULTS
        )
    
        search_tool = CourseSearchTool(vector_store)
        result = search_tool.execute("any query")
    
        # Should handle empty database gracefully
&gt;       assert "No relevant content found" in result
E       AssertionError: assert 'No relevant content found' in 'Search error: Number of requested results 0, cannot be negative, or zero. in query.'

tests/test_integration_real.py:266: AssertionError</failure></testcase><testcase classname="tests.test_integration_real.TestRealIntegrationIssues" name="test_invalid_chroma_path" time="0.002"><failure message="AssertionError: assert ('path' in 'read-only file system (os error 30)' or 'permission' in 'read-only file system (os error 30)')&#10; +  where 'read-only file system (os error 30)' = &lt;built-in method lower of str object at 0x13d212600&gt;()&#10; +    where &lt;built-in method lower of str object at 0x13d212600&gt; = 'Read-only file system (os error 30)'.lower&#10; +      where 'Read-only file system (os error 30)' = str(InternalError('Read-only file system (os error 30)'))&#10; +  and   'read-only file system (os error 30)' = &lt;built-in method lower of str object at 0x13d212600&gt;()&#10; +    where &lt;built-in method lower of str object at 0x13d212600&gt; = 'Read-only file system (os error 30)'.lower&#10; +      where 'Read-only file system (os error 30)' = str(InternalError('Read-only file system (os error 30)'))">self = &lt;tests.test_integration_real.TestRealIntegrationIssues object at 0x1380a2250&gt;

    def test_invalid_chroma_path(self):
        """Test behavior with invalid ChromaDB path"""
        config = Config()
        config.CHROMA_PATH = "/invalid/path/that/does/not/exist"
        config.MAX_RESULTS = 5  # Use proper value
    
        # Should handle invalid path gracefully or raise appropriate error
        try:
&gt;           vector_store = VectorStore(
                config.CHROMA_PATH,
                config.EMBEDDING_MODEL,
                config.MAX_RESULTS
            )

tests/test_integration_real.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;vector_store.VectorStore object at 0x13d259370&gt;
chroma_path = '/invalid/path/that/does/not/exist'
embedding_model = 'all-MiniLM-L6-v2', max_results = 5

    def __init__(self, chroma_path: str, embedding_model: str, max_results: int = 5):
        self.max_results = max_results
        # Initialize ChromaDB client
&gt;       self.client = chromadb.PersistentClient(
            path=chroma_path,
            settings=Settings(anonymized_telemetry=False)
        )

vector_store.py:40: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

path = '/invalid/path/that/does/not/exist'
settings = Settings(environment='', chroma_api_impl='chromadb.api.rust.RustBindingsAPI', chroma_server_nofile=None, chroma_server...signmentPolicy', chroma_coordinator_host='localhost', chroma_logservice_host='localhost', chroma_logservice_port=50052)
tenant = 'default_tenant', database = 'default_database'

    def PersistentClient(
        path: Union[str, Path] = "./chroma",
        settings: Optional[Settings] = None,
        tenant: str = DEFAULT_TENANT,
        database: str = DEFAULT_DATABASE,
    ) -&gt; ClientAPI:
        """
        Creates a persistent instance of Chroma that saves to disk. This is useful for
        testing and development, but not recommended for production use.
    
        Args:
            path: The directory to save Chroma's data to. Defaults to "./chroma".
            tenant: The tenant to use for this client. Defaults to the default tenant.
            database: The database to use for this client. Defaults to the default database.
        """
        if settings is None:
            settings = Settings()
        settings.persist_directory = str(path)
        settings.is_persistent = True
    
        # Make sure paramaters are the correct types -- users can pass anything.
        tenant = str(tenant)
        database = str(database)
    
&gt;       return ClientCreator(tenant=tenant, database=database, settings=settings)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

../.venv/lib/python3.13/site-packages/chromadb/__init__.py:164: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;chromadb.api.client.Client object at 0x13d259480&gt;
tenant = 'default_tenant', database = 'default_database'
settings = Settings(environment='', chroma_api_impl='chromadb.api.rust.RustBindingsAPI', chroma_server_nofile=None, chroma_server...signmentPolicy', chroma_coordinator_host='localhost', chroma_logservice_host='localhost', chroma_logservice_port=50052)

    def __init__(
        self,
        tenant: str = DEFAULT_TENANT,
        database: str = DEFAULT_DATABASE,
        settings: Settings = Settings(),
    ) -&gt; None:
&gt;       super().__init__(settings=settings)

../.venv/lib/python3.13/site-packages/chromadb/api/client.py:65: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;chromadb.api.client.Client object at 0x13d259480&gt;
settings = Settings(environment='', chroma_api_impl='chromadb.api.rust.RustBindingsAPI', chroma_server_nofile=None, chroma_server...signmentPolicy', chroma_coordinator_host='localhost', chroma_logservice_host='localhost', chroma_logservice_port=50052)

    def __init__(
        self,
        settings: Settings = Settings(),
    ) -&gt; None:
        self._identifier = SharedSystemClient._get_identifier_from_settings(settings)
&gt;       SharedSystemClient._create_system_if_not_exists(self._identifier, settings)

../.venv/lib/python3.13/site-packages/chromadb/api/shared_system_client.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = &lt;class 'chromadb.api.shared_system_client.SharedSystemClient'&gt;
identifier = '/invalid/path/that/does/not/exist'
settings = Settings(environment='', chroma_api_impl='chromadb.api.rust.RustBindingsAPI', chroma_server_nofile=None, chroma_server...signmentPolicy', chroma_coordinator_host='localhost', chroma_logservice_host='localhost', chroma_logservice_port=50052)

    @classmethod
    def _create_system_if_not_exists(
        cls, identifier: str, settings: Settings
    ) -&gt; System:
        if identifier not in cls._identifier_to_system:
            new_system = System(settings)
            cls._identifier_to_system[identifier] = new_system
    
            new_system.instance(ProductTelemetryClient)
            new_system.instance(ServerAPI)
    
&gt;           new_system.start()

../.venv/lib/python3.13/site-packages/chromadb/api/shared_system_client.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;chromadb.config.System object at 0x13d259590&gt;

    @override
    def start(self) -&gt; None:
        super().start()
        for component in self.components():
&gt;           component.start()

../.venv/lib/python3.13/site-packages/chromadb/config.py:471: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;chromadb.api.rust.RustBindingsAPI object at 0x13d2597b0&gt;

    @override
    def start(self) -&gt; None:
        # Construct the SqliteConfig
        # TOOD: We should add a "config converter"
        if self._system.settings.require("is_persistent"):
            persist_path = self._system.settings.require("persist_directory")
            sqlite_persist_path = persist_path + "/chroma.sqlite3"
        else:
            persist_path = None
            sqlite_persist_path = None
        hash_type = self._system.settings.require("migrations_hash_algorithm")
        hash_type_bindings = (
            chromadb_rust_bindings.MigrationHash.MD5
            if hash_type == "md5"
            else chromadb_rust_bindings.MigrationHash.SHA256
        )
        migration_mode = self._system.settings.require("migrations")
        migration_mode_bindings = (
            chromadb_rust_bindings.MigrationMode.Apply
            if migration_mode == "apply"
            else chromadb_rust_bindings.MigrationMode.Validate
        )
        sqlite_config = chromadb_rust_bindings.SqliteDBConfig(
            hash_type=hash_type_bindings,
            migration_mode=migration_mode_bindings,
            url=sqlite_persist_path,
        )
    
&gt;       self.bindings = chromadb_rust_bindings.Bindings(
            allow_reset=self._system.settings.require("allow_reset"),
            sqlite_db_config=sqlite_config,
            persist_path=persist_path,
            hnsw_cache_size=self.hnsw_cache_size,
        )
E       chromadb.errors.InternalError: Read-only file system (os error 30)

../.venv/lib/python3.13/site-packages/chromadb/api/rust.py:112: InternalError

During handling of the above exception, another exception occurred:

self = &lt;tests.test_integration_real.TestRealIntegrationIssues object at 0x1380a2250&gt;

    def test_invalid_chroma_path(self):
        """Test behavior with invalid ChromaDB path"""
        config = Config()
        config.CHROMA_PATH = "/invalid/path/that/does/not/exist"
        config.MAX_RESULTS = 5  # Use proper value
    
        # Should handle invalid path gracefully or raise appropriate error
        try:
            vector_store = VectorStore(
                config.CHROMA_PATH,
                config.EMBEDDING_MODEL,
                config.MAX_RESULTS
            )
            # If it doesn't raise error, test search behavior
            results = vector_store.search("test query")
            assert results.error is not None or results.is_empty()
        except Exception as e:
            # Expected behavior - should fail gracefully
&gt;           assert "path" in str(e).lower() or "permission" in str(e).lower()
E           AssertionError: assert ('path' in 'read-only file system (os error 30)' or 'permission' in 'read-only file system (os error 30)')
E            +  where 'read-only file system (os error 30)' = &lt;built-in method lower of str object at 0x13d212600&gt;()
E            +    where &lt;built-in method lower of str object at 0x13d212600&gt; = 'Read-only file system (os error 30)'.lower
E            +      where 'Read-only file system (os error 30)' = str(InternalError('Read-only file system (os error 30)'))
E            +  and   'read-only file system (os error 30)' = &lt;built-in method lower of str object at 0x13d212600&gt;()
E            +    where &lt;built-in method lower of str object at 0x13d212600&gt; = 'Read-only file system (os error 30)'.lower
E            +      where 'Read-only file system (os error 30)' = str(InternalError('Read-only file system (os error 30)'))

tests/test_integration_real.py:287: AssertionError</failure></testcase><testcase classname="tests.test_integration_real.TestRealIntegrationIssues" name="test_missing_embedding_model" time="0.272" /><testcase classname="tests.test_rag_system.TestRAGSystem" name="test_init_creates_all_components" time="0.002" /><testcase classname="tests.test_rag_system.TestRAGSystem" name="test_init_registers_tools" time="0.001" /><testcase classname="tests.test_rag_system.TestRAGSystem" name="test_query_successful_without_session" time="0.002" /><testcase classname="tests.test_rag_system.TestRAGSystem" name="test_query_successful_with_session" time="0.001" /><testcase classname="tests.test_rag_system.TestRAGSystem" name="test_query_with_sources" time="0.001" /><testcase classname="tests.test_rag_system.TestRAGSystem" name="test_query_ai_generator_error" time="0.001" /><testcase classname="tests.test_rag_system.TestRAGSystem" name="test_add_course_document_successful" time="0.001" /><testcase classname="tests.test_rag_system.TestRAGSystem" name="test_add_course_document_processing_error" time="0.001" /><testcase classname="tests.test_rag_system.TestRAGSystem" name="test_add_course_folder_successful" time="0.001"><failure message="assert 0 == 3">self = &lt;tests.test_rag_system.TestRAGSystem object at 0x1380a2950&gt;
mock_listdir = &lt;MagicMock name='listdir' id='5321493872'&gt;
mock_exists = &lt;MagicMock name='exists' id='5321495216'&gt;
test_config = Config(ANTHROPIC_API_KEY='test-api-key', ANTHROPIC_MODEL='claude-sonnet-4-20250514', EMBEDDING_MODEL='all-MiniLM-L6-v2..._OVERLAP=100, MAX_RESULTS=3, MAX_HISTORY=2, CHROMA_PATH='/var/folders/cd/sffrtsds7ng1hkcbr01d68x00000gp/T/tmpq0qgfdrm')
mock_components = {'ai_generator': &lt;Mock name='AIGenerator()' id='5321494880'&gt;, 'doc_processor': &lt;Mock name='DocumentProcessor()' id='53..._manager': &lt;Mock name='SessionManager()' id='5321496224'&gt;, 'vector_store': &lt;Mock name='VectorStore()' id='5321494208'&gt;}
sample_course = Course(title='Sample Course', course_link='https://example.com/course', instructor='Test Instructor', lessons=[Lesson(...://example.com/lesson1'), Lesson(lesson_number=2, title='Advanced Topics', lesson_link='https://example.com/lesson2')])
sample_course_chunks = [CourseChunk(content='This is the introduction to our sample course. We will cover basic concepts.', course_title='Sam... examples and case studies to illustrate the concepts.', course_title='Sample Course', lesson_number=2, chunk_index=2)]

    @patch('rag_system.os.path.exists')
    @patch('rag_system.os.listdir')
    def test_add_course_folder_successful(self, mock_listdir, mock_exists, test_config, mock_components, sample_course, sample_course_chunks):
        """Test successful course folder processing"""
        mock_exists.return_value = True
        mock_listdir.return_value = ['course1.txt', 'course2.pdf', 'course3.docx', 'readme.md']
    
        # Mock existing course titles (empty initially)
        mock_components['vector_store'].get_existing_course_titles.return_value = []
    
        # Mock document processing
        mock_components['doc_processor'].process_course_document.return_value = (sample_course, sample_course_chunks)
    
        rag = RAGSystem(test_config)
    
        courses, chunks = rag.add_course_folder("/path/to/docs", clear_existing=False)
    
&gt;       assert courses == 3  # 3 valid course files
        ^^^^^^^^^^^^^^^^^^^
E       assert 0 == 3

tests/test_rag_system.py:186: AssertionError</failure></testcase><testcase classname="tests.test_rag_system.TestRAGSystem" name="test_add_course_folder_nonexistent" time="0.001" /><testcase classname="tests.test_rag_system.TestRAGSystem" name="test_add_course_folder_with_existing_courses" time="0.001"><failure message="assert 0 == 1">self = &lt;tests.test_rag_system.TestRAGSystem object at 0x1380468a0&gt;
mock_listdir = &lt;MagicMock name='listdir' id='5321503616'&gt;
mock_exists = &lt;MagicMock name='exists' id='5321503952'&gt;
test_config = Config(ANTHROPIC_API_KEY='test-api-key', ANTHROPIC_MODEL='claude-sonnet-4-20250514', EMBEDDING_MODEL='all-MiniLM-L6-v2..._OVERLAP=100, MAX_RESULTS=3, MAX_HISTORY=2, CHROMA_PATH='/var/folders/cd/sffrtsds7ng1hkcbr01d68x00000gp/T/tmp_qpmqnff')
mock_components = {'ai_generator': &lt;Mock name='AIGenerator()' id='5321502944'&gt;, 'doc_processor': &lt;Mock name='DocumentProcessor()' id='53..._manager': &lt;Mock name='SessionManager()' id='5321503280'&gt;, 'vector_store': &lt;Mock name='VectorStore()' id='5321502608'&gt;}
sample_course = Course(title='Sample Course', course_link='https://example.com/course', instructor='Test Instructor', lessons=[Lesson(...://example.com/lesson1'), Lesson(lesson_number=2, title='Advanced Topics', lesson_link='https://example.com/lesson2')])
sample_course_chunks = [CourseChunk(content='This is the introduction to our sample course. We will cover basic concepts.', course_title='Sam... examples and case studies to illustrate the concepts.', course_title='Sample Course', lesson_number=2, chunk_index=2)]

    @patch('rag_system.os.path.exists')
    @patch('rag_system.os.listdir')
    def test_add_course_folder_with_existing_courses(self, mock_listdir, mock_exists, test_config, mock_components, sample_course, sample_course_chunks):
        """Test folder processing with some existing courses"""
        mock_exists.return_value = True
        mock_listdir.return_value = ['course1.txt', 'course2.txt']
    
        # Mock one existing course
        mock_components['vector_store'].get_existing_course_titles.return_value = ['Sample Course']
        mock_components['doc_processor'].process_course_document.return_value = (sample_course, sample_course_chunks)
    
        rag = RAGSystem(test_config)
    
        courses, chunks = rag.add_course_folder("/path/to/docs")
    
        # Should skip the existing course, only add one new one
&gt;       assert courses == 1
E       assert 0 == 1

tests/test_rag_system.py:220: AssertionError</failure></testcase><testcase classname="tests.test_rag_system.TestRAGSystem" name="test_add_course_folder_clear_existing" time="0.001" /><testcase classname="tests.test_rag_system.TestRAGSystem" name="test_get_course_analytics" time="0.001" /><testcase classname="tests.test_rag_system.TestRAGSystem" name="test_query_prompt_formatting" time="0.001" /><testcase classname="tests.test_rag_system.TestRAGSystem" name="test_session_management_flow" time="0.001" /><testcase classname="tests.test_rag_system.TestRAGSystem" name="test_tool_manager_integration" time="0.001" /><testcase classname="tests.test_rag_system.TestRAGSystemRealIntegration" name="test_real_config_validation" time="0.013" /><testcase classname="tests.test_rag_system.TestRAGSystemRealIntegration" name="test_missing_api_key_behavior" time="0.011" /><testcase classname="tests.test_rag_system.TestRAGSystemRealIntegration" name="test_document_loading_integration" time="0.001" /><testcase classname="tests.test_rag_system_enhanced.TestRAGSystemRealWorldScenarios" name="test_query_with_broken_config_reveals_bug" time="0.076" /><testcase classname="tests.test_rag_system_enhanced.TestRAGSystemRealWorldScenarios" name="test_query_with_working_config" time="0.079" /><testcase classname="tests.test_rag_system_enhanced.TestRAGSystemRealWorldScenarios" name="test_query_with_empty_database" time="0.017" /><testcase classname="tests.test_rag_system_enhanced.TestRAGSystemRealWorldScenarios" name="test_query_with_missing_api_key" time="0.011" /><testcase classname="tests.test_rag_system_enhanced.TestRAGSystemRealWorldScenarios" name="test_session_management_with_long_history" time="0.010" /><testcase classname="tests.test_rag_system_enhanced.TestRAGSystemRealWorldScenarios" name="test_concurrent_queries_session_isolation" time="0.010" /><testcase classname="tests.test_rag_system_enhanced.TestRAGSystemRealWorldScenarios" name="test_tool_execution_error_handling" time="0.009" /><testcase classname="tests.test_rag_system_enhanced.TestRAGSystemRealWorldScenarios" name="test_large_document_processing" time="1.166"><failure message="AttributeError: 'function' object has no attribute 'call_count'">self = &lt;tests.test_rag_system_enhanced.TestRAGSystemRealWorldScenarios object at 0x1380a2d50&gt;
working_config = Config(ANTHROPIC_API_KEY='test-key', ANTHROPIC_MODEL='claude-sonnet-4-20250514', EMBEDDING_MODEL='all-MiniLM-L6-v2', C..._OVERLAP=100, MAX_RESULTS=5, MAX_HISTORY=2, CHROMA_PATH='/var/folders/cd/sffrtsds7ng1hkcbr01d68x00000gp/T/tmpdiaxr4sf')

    def test_large_document_processing(self, working_config):
        """Test processing very large documents"""
        with patch('rag_system.DocumentProcessor') as mock_doc_proc, \
             patch('rag_system.SessionManager'), \
             patch('rag_system.AIGenerator'):
    
            # Mock processing of large document
            large_course = Course(
                title="Large Course",
                course_link="https://example.com",
                instructor="Test Instructor",
                lessons=[Lesson(lesson_number=i, title=f"Lesson {i}", lesson_link=f"https://example.com/lesson{i}") for i in range(1, 101)]
            )
    
            # Create many chunks
            large_chunks = [
                CourseChunk(
                    content=f"Content for chunk {i} with detailed information about topic {i}.",
                    course_title="Large Course",
                    lesson_number=(i % 10) + 1,
                    chunk_index=i
                ) for i in range(1000)
            ]
    
            mock_doc_proc.return_value.process_course_document.return_value = (large_course, large_chunks)
    
            rag = RAGSystem(working_config)
    
            course, chunk_count = rag.add_course_document("/path/to/large_course.txt")
    
            assert course.title == "Large Course"
            assert chunk_count == 1000
    
            # Verify data was added to vector store
&gt;           assert rag.vector_store.add_course_metadata.call_count == 1
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E           AttributeError: 'function' object has no attribute 'call_count'

tests/test_rag_system_enhanced.py:307: AttributeError</failure></testcase><testcase classname="tests.test_rag_system_enhanced.TestRAGSystemRealWorldScenarios" name="test_document_processing_corruption_handling" time="0.010" /><testcase classname="tests.test_rag_system_enhanced.TestRAGSystemRealWorldScenarios" name="test_analytics_with_real_data" time="0.087" /><testcase classname="tests.test_rag_system_enhanced.TestRAGSystemRealWorldScenarios" name="test_source_tracking_accuracy" time="0.076"><failure message="AttributeError: 'function' object has no attribute 'assert_called_once'">self = &lt;tests.test_rag_system_enhanced.TestRAGSystemRealWorldScenarios object at 0x138046e40&gt;
working_config = Config(ANTHROPIC_API_KEY='test-key', ANTHROPIC_MODEL='claude-sonnet-4-20250514', EMBEDDING_MODEL='all-MiniLM-L6-v2', C..._OVERLAP=100, MAX_RESULTS=5, MAX_HISTORY=2, CHROMA_PATH='/var/folders/cd/sffrtsds7ng1hkcbr01d68x00000gp/T/tmp69iorqqa')

    def test_source_tracking_accuracy(self, working_config):
        """Test that sources are accurately tracked and returned"""
        with patch('rag_system.DocumentProcessor'), \
             patch('rag_system.SessionManager'), \
             patch('rag_system.AIGenerator') as mock_ai_gen:
    
            mock_ai_gen.return_value.generate_response.return_value = "Found relevant information"
    
            rag = RAGSystem(working_config)
    
            # Add course with lessons
            course = Course(
                title="Source Test Course",
                course_link="https://example.com/course",
                instructor="Test Instructor",
                lessons=[
                    Lesson(lesson_number=1, title="Intro", lesson_link="https://example.com/lesson1"),
                    Lesson(lesson_number=2, title="Advanced", lesson_link="https://example.com/lesson2")
                ]
            )
            chunks = [
                CourseChunk(
                    content="Introduction content",
                    course_title="Source Test Course",
                    lesson_number=1,
                    chunk_index=0
                ),
                CourseChunk(
                    content="Advanced content",
                    course_title="Source Test Course",
                    lesson_number=2,
                    chunk_index=1
                )
            ]
    
            rag.vector_store.add_course_metadata(course)
            rag.vector_store.add_course_content(chunks)
    
            # Mock tool manager to return specific sources
            expected_sources = [
                {"text": "Source Test Course - Lesson 1", "link": "https://example.com/lesson1"},
                {"text": "Source Test Course - Lesson 2", "link": "https://example.com/lesson2"}
            ]
            rag.tool_manager.get_last_sources = Mock(return_value=expected_sources)
    
            response, sources = rag.query("Tell me about the course content")
    
            assert sources == expected_sources
            assert len(sources) == 2
            assert all("link" in source and "text" in source for source in sources)
    
            # Verify sources were reset after retrieval
&gt;           rag.tool_manager.reset_sources.assert_called_once()
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E           AttributeError: 'function' object has no attribute 'assert_called_once'

tests/test_rag_system_enhanced.py:403: AttributeError</failure></testcase><testcase classname="tests.test_rag_system_enhanced.TestRAGSystemRealWorldScenarios" name="test_error_recovery_and_graceful_degradation" time="0.010" /><testcase classname="tests.test_search_tools.TestCourseSearchTool" name="test_get_tool_definition" time="0.000" /><testcase classname="tests.test_search_tools.TestCourseSearchTool" name="test_execute_successful_search" time="0.000" /><testcase classname="tests.test_search_tools.TestCourseSearchTool" name="test_execute_with_course_filter" time="0.000" /><testcase classname="tests.test_search_tools.TestCourseSearchTool" name="test_execute_with_lesson_filter" time="0.000" /><testcase classname="tests.test_search_tools.TestCourseSearchTool" name="test_execute_with_both_filters" time="0.000" /><testcase classname="tests.test_search_tools.TestCourseSearchTool" name="test_execute_empty_results" time="0.000" /><testcase classname="tests.test_search_tools.TestCourseSearchTool" name="test_execute_empty_results_with_filters" time="0.000" /><testcase classname="tests.test_search_tools.TestCourseSearchTool" name="test_execute_search_error" time="0.000" /><testcase classname="tests.test_search_tools.TestCourseSearchTool" name="test_format_results_with_lesson_links" time="0.000" /><testcase classname="tests.test_search_tools.TestCourseSearchTool" name="test_format_results_without_lesson_links" time="0.000" /><testcase classname="tests.test_search_tools.TestCourseSearchTool" name="test_format_results_lesson_link_error" time="0.000" /><testcase classname="tests.test_search_tools.TestCourseSearchTool" name="test_sources_reset_between_searches" time="0.000"><failure message="AssertionError: assert 2 == 0&#10; +  where 2 = len([{'link': 'https://example.com/lesson1', 'text': 'Sample Course - Lesson 1'}, {'link': 'https://example.com/lesson1', 'text': 'Sample Course - Lesson 2'}])&#10; +    where [{'link': 'https://example.com/lesson1', 'text': 'Sample Course - Lesson 1'}, {'link': 'https://example.com/lesson1', 'text': 'Sample Course - Lesson 2'}] = &lt;search_tools.CourseSearchTool object at 0x14822f230&gt;.last_sources">self = &lt;tests.test_search_tools.TestCourseSearchTool object at 0x13811cad0&gt;
mock_vector_store = &lt;Mock id='5505745984'&gt;
mock_search_results = SearchResults(documents=['This is the introduction to our sample course. We will cover basic concepts.', 'In this less...index': 0}, {'course_title': 'Sample Course', 'lesson_number': 2, 'chunk_index': 1}], distances=[0.1, 0.2], error=None)

    def test_sources_reset_between_searches(self, mock_vector_store, mock_search_results):
        """Test that sources are properly reset between searches"""
        mock_vector_store.search.return_value = mock_search_results
    
        tool = CourseSearchTool(mock_vector_store)
    
        # First search
        tool.execute("first query")
        first_sources_count = len(tool.last_sources)
    
        # Second search with different results
        empty_results = SearchResults(documents=[], metadata=[], distances=[])
        mock_vector_store.search.return_value = empty_results
        tool.execute("second query")
    
        # Sources should be empty for second search
&gt;       assert len(tool.last_sources) == 0
E       AssertionError: assert 2 == 0
E        +  where 2 = len([{'link': 'https://example.com/lesson1', 'text': 'Sample Course - Lesson 1'}, {'link': 'https://example.com/lesson1', 'text': 'Sample Course - Lesson 2'}])
E        +    where [{'link': 'https://example.com/lesson1', 'text': 'Sample Course - Lesson 1'}, {'link': 'https://example.com/lesson1', 'text': 'Sample Course - Lesson 2'}] = &lt;search_tools.CourseSearchTool object at 0x14822f230&gt;.last_sources

tests/test_search_tools.py:193: AssertionError</failure></testcase><testcase classname="tests.test_search_tools.TestCourseOutlineTool" name="test_get_tool_definition" time="0.000" /><testcase classname="tests.test_search_tools.TestCourseOutlineTool" name="test_execute_successful_outline" time="0.000" /><testcase classname="tests.test_search_tools.TestCourseOutlineTool" name="test_execute_course_not_found" time="0.000"><failure message="AssertionError: assert 'No course found matching' in '**Different Course**\n\nCourse Link: [Different Course](https://example.com/course)\n\nNo lesson information available.'">self = &lt;tests.test_search_tools.TestCourseOutlineTool object at 0x1380d1cd0&gt;
mock_vector_store = &lt;Mock id='5238604864'&gt;

    def test_execute_course_not_found(self, mock_vector_store):
        """Test handling when course is not found"""
        course_metadata = [{
            "title": "Different Course",
            "instructor": "Test Instructor",
            "course_link": "https://example.com/course",
            "lessons": []
        }]
        mock_vector_store.get_all_courses_metadata.return_value = course_metadata
    
        tool = CourseOutlineTool(mock_vector_store)
        result = tool.execute("Nonexistent Course")
    
&gt;       assert "No course found matching" in result
E       AssertionError: assert 'No course found matching' in '**Different Course**\n\nCourse Link: [Different Course](https://example.com/course)\n\nNo lesson information available.'

tests/test_search_tools.py:243: AssertionError</failure></testcase><testcase classname="tests.test_search_tools.TestCourseOutlineTool" name="test_execute_no_courses_available" time="0.000" /><testcase classname="tests.test_search_tools.TestCourseOutlineTool" name="test_execute_metadata_error" time="0.000" /><testcase classname="tests.test_search_tools.TestToolManager" name="test_register_tool" time="0.000" /><testcase classname="tests.test_search_tools.TestToolManager" name="test_get_tool_definitions" time="0.000" /><testcase classname="tests.test_search_tools.TestToolManager" name="test_execute_tool" time="0.000" /><testcase classname="tests.test_search_tools.TestToolManager" name="test_execute_nonexistent_tool" time="0.000" /><testcase classname="tests.test_search_tools.TestToolManager" name="test_get_last_sources" time="0.000" /><testcase classname="tests.test_search_tools.TestToolManager" name="test_reset_sources" time="0.000" /><testcase classname="tests.test_vector_store.TestSearchResults" name="test_from_chroma_with_results" time="0.000" /><testcase classname="tests.test_vector_store.TestSearchResults" name="test_from_chroma_empty_results" time="0.000" /><testcase classname="tests.test_vector_store.TestSearchResults" name="test_empty_with_error" time="0.000" /><testcase classname="tests.test_vector_store.TestSearchResults" name="test_is_empty_true" time="0.000" /><testcase classname="tests.test_vector_store.TestSearchResults" name="test_is_empty_false" time="0.000" /><testcase classname="tests.test_vector_store.TestVectorStore" name="test_init_creates_collections" time="0.001" /><testcase classname="tests.test_vector_store.TestVectorStore" name="test_search_without_filters" time="0.001" /><testcase classname="tests.test_vector_store.TestVectorStore" name="test_search_with_course_filter" time="0.000"><failure message="TypeError: TestVectorStore.test_search_with_course_filter() takes 2 positional arguments but 3 were given">args = (&lt;tests.test_vector_store.TestVectorStore object at 0x1380d2780&gt;,)
keywargs = {}
newargs = (&lt;tests.test_vector_store.TestVectorStore object at 0x1380d2780&gt;, &lt;MagicMock name='SentenceTransformerEmbeddingFunction' id='5505759760'&gt;, &lt;MagicMock name='PersistentClient' id='5505759424'&gt;)
newkeywargs = {}

    @wraps(func)
    def patched(*args, **keywargs):
        with self.decoration_helper(patched,
                                    args,
                                    keywargs) as (newargs, newkeywargs):
&gt;           return func(*newargs, **newkeywargs)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E           TypeError: TestVectorStore.test_search_with_course_filter() takes 2 positional arguments but 3 were given

/opt/homebrew/Cellar/python@3.13/3.13.5/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1426: TypeError</failure></testcase><testcase classname="tests.test_vector_store.TestVectorStore" name="test_search_with_lesson_filter" time="0.000"><failure message="TypeError: TestVectorStore.test_search_with_lesson_filter() takes 2 positional arguments but 3 were given">args = (&lt;tests.test_vector_store.TestVectorStore object at 0x1380d28b0&gt;,)
keywargs = {}
newargs = (&lt;tests.test_vector_store.TestVectorStore object at 0x1380d28b0&gt;, &lt;MagicMock name='SentenceTransformerEmbeddingFunction' id='4435147280'&gt;, &lt;MagicMock name='PersistentClient' id='4435145264'&gt;)
newkeywargs = {}

    @wraps(func)
    def patched(*args, **keywargs):
        with self.decoration_helper(patched,
                                    args,
                                    keywargs) as (newargs, newkeywargs):
&gt;           return func(*newargs, **newkeywargs)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E           TypeError: TestVectorStore.test_search_with_lesson_filter() takes 2 positional arguments but 3 were given

/opt/homebrew/Cellar/python@3.13/3.13.5/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1426: TypeError</failure></testcase><testcase classname="tests.test_vector_store.TestVectorStore" name="test_search_with_both_filters" time="0.000"><failure message="TypeError: TestVectorStore.test_search_with_both_filters() takes 2 positional arguments but 3 were given">args = (&lt;tests.test_vector_store.TestVectorStore object at 0x1381a96d0&gt;,)
keywargs = {}
newargs = (&lt;tests.test_vector_store.TestVectorStore object at 0x1381a96d0&gt;, &lt;MagicMock name='SentenceTransformerEmbeddingFunction' id='5238604528'&gt;, &lt;MagicMock name='PersistentClient' id='4395939024'&gt;)
newkeywargs = {}

    @wraps(func)
    def patched(*args, **keywargs):
        with self.decoration_helper(patched,
                                    args,
                                    keywargs) as (newargs, newkeywargs):
&gt;           return func(*newargs, **newkeywargs)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E           TypeError: TestVectorStore.test_search_with_both_filters() takes 2 positional arguments but 3 were given

/opt/homebrew/Cellar/python@3.13/3.13.5/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1426: TypeError</failure></testcase><testcase classname="tests.test_vector_store.TestVectorStore" name="test_search_course_not_found" time="0.000"><failure message="TypeError: TestVectorStore.test_search_course_not_found() takes 2 positional arguments but 3 were given">args = (&lt;tests.test_vector_store.TestVectorStore object at 0x1382a8c00&gt;,)
keywargs = {}
newargs = (&lt;tests.test_vector_store.TestVectorStore object at 0x1382a8c00&gt;, &lt;MagicMock name='SentenceTransformerEmbeddingFunction' id='4395938688'&gt;, &lt;MagicMock name='PersistentClient' id='5237354720'&gt;)
newkeywargs = {}

    @wraps(func)
    def patched(*args, **keywargs):
        with self.decoration_helper(patched,
                                    args,
                                    keywargs) as (newargs, newkeywargs):
&gt;           return func(*newargs, **newkeywargs)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E           TypeError: TestVectorStore.test_search_course_not_found() takes 2 positional arguments but 3 were given

/opt/homebrew/Cellar/python@3.13/3.13.5/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1426: TypeError</failure></testcase><testcase classname="tests.test_vector_store.TestVectorStore" name="test_search_chromadb_error" time="0.000"><failure message="TypeError: TestVectorStore.test_search_chromadb_error() takes 2 positional arguments but 3 were given">args = (&lt;tests.test_vector_store.TestVectorStore object at 0x1382a9040&gt;,)
keywargs = {}
newargs = (&lt;tests.test_vector_store.TestVectorStore object at 0x1382a9040&gt;, &lt;MagicMock name='SentenceTransformerEmbeddingFunction' id='5237355056'&gt;, &lt;MagicMock name='PersistentClient' id='5505757744'&gt;)
newkeywargs = {}

    @wraps(func)
    def patched(*args, **keywargs):
        with self.decoration_helper(patched,
                                    args,
                                    keywargs) as (newargs, newkeywargs):
&gt;           return func(*newargs, **newkeywargs)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E           TypeError: TestVectorStore.test_search_chromadb_error() takes 2 positional arguments but 3 were given

/opt/homebrew/Cellar/python@3.13/3.13.5/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1426: TypeError</failure></testcase><testcase classname="tests.test_vector_store.TestVectorStore" name="test_add_course_metadata" time="0.000"><failure message="NameError: name 'mock_embedding_func' is not defined">self = &lt;tests.test_vector_store.TestVectorStore object at 0x1380a2b50&gt;
mock_client_class = &lt;MagicMock name='SentenceTransformerEmbeddingFunction' id='5505750688'&gt;
sample_course = &lt;MagicMock name='PersistentClient' id='5505756736'&gt;

    @patch('vector_store.chromadb.PersistentClient')
    @patch('vector_store.chromadb.utils.embedding_functions.SentenceTransformerEmbeddingFunction')
    def test_add_course_metadata(self, mock_client_class, sample_course):
        """Test adding course metadata to vector store"""
        mock_client = Mock()
        mock_client_class.return_value = mock_client
    
        mock_catalog = Mock()
        mock_client.get_or_create_collection.return_value = mock_catalog
    
        # Mock embedding function
&gt;       mock_embedding_func.return_value = Mock()
        ^^^^^^^^^^^^^^^^^^^
E       NameError: name 'mock_embedding_func' is not defined

tests/test_vector_store.py:312: NameError</failure></testcase><testcase classname="tests.test_vector_store.TestVectorStore" name="test_add_course_content" time="0.000"><failure message="NameError: name 'mock_embedding_func' is not defined">self = &lt;tests.test_vector_store.TestVectorStore object at 0x1380a3150&gt;
mock_client_class = &lt;MagicMock name='SentenceTransformerEmbeddingFunction' id='5505749008'&gt;
sample_course_chunks = &lt;MagicMock name='PersistentClient' id='5505756400'&gt;

    @patch('vector_store.chromadb.PersistentClient')
    @patch('vector_store.chromadb.utils.embedding_functions.SentenceTransformerEmbeddingFunction')
    def test_add_course_content(self, mock_client_class, sample_course_chunks):
        """Test adding course content chunks to vector store"""
        mock_client = Mock()
        mock_client_class.return_value = mock_client
    
        mock_content = Mock()
        mock_client.get_or_create_collection.return_value = mock_content
    
        # Mock embedding function
&gt;       mock_embedding_func.return_value = Mock()
        ^^^^^^^^^^^^^^^^^^^
E       NameError: name 'mock_embedding_func' is not defined

tests/test_vector_store.py:342: NameError</failure></testcase><testcase classname="tests.test_vector_store.TestVectorStore" name="test_add_course_content_empty_list" time="0.000"><failure message="TypeError: TestVectorStore.test_add_course_content_empty_list() takes 2 positional arguments but 3 were given">args = (&lt;tests.test_vector_store.TestVectorStore object at 0x1380475c0&gt;,)
keywargs = {}
newargs = (&lt;tests.test_vector_store.TestVectorStore object at 0x1380475c0&gt;, &lt;MagicMock name='SentenceTransformerEmbeddingFunction' id='5237355056'&gt;, &lt;MagicMock name='PersistentClient' id='5237354720'&gt;)
newkeywargs = {}

    @wraps(func)
    def patched(*args, **keywargs):
        with self.decoration_helper(patched,
                                    args,
                                    keywargs) as (newargs, newkeywargs):
&gt;           return func(*newargs, **newkeywargs)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E           TypeError: TestVectorStore.test_add_course_content_empty_list() takes 2 positional arguments but 3 were given

/opt/homebrew/Cellar/python@3.13/3.13.5/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1426: TypeError</failure></testcase><testcase classname="tests.test_vector_store.TestVectorStore" name="test_clear_all_data" time="0.000"><failure message="TypeError: TestVectorStore.test_clear_all_data() takes 2 positional arguments but 3 were given">args = (&lt;tests.test_vector_store.TestVectorStore object at 0x1380473e0&gt;,)
keywargs = {}
newargs = (&lt;tests.test_vector_store.TestVectorStore object at 0x1380473e0&gt;, &lt;MagicMock name='SentenceTransformerEmbeddingFunction' id='4395938688'&gt;, &lt;MagicMock name='PersistentClient' id='4395939024'&gt;)
newkeywargs = {}

    @wraps(func)
    def patched(*args, **keywargs):
        with self.decoration_helper(patched,
                                    args,
                                    keywargs) as (newargs, newkeywargs):
&gt;           return func(*newargs, **newkeywargs)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E           TypeError: TestVectorStore.test_clear_all_data() takes 2 positional arguments but 3 were given

/opt/homebrew/Cellar/python@3.13/3.13.5/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1426: TypeError</failure></testcase><testcase classname="tests.test_vector_store.TestVectorStore" name="test_get_existing_course_titles" time="0.000"><failure message="TypeError: TestVectorStore.test_get_existing_course_titles() takes 2 positional arguments but 3 were given">args = (&lt;tests.test_vector_store.TestVectorStore object at 0x13812c210&gt;,)
keywargs = {}
newargs = (&lt;tests.test_vector_store.TestVectorStore object at 0x13812c210&gt;, &lt;MagicMock name='SentenceTransformerEmbeddingFunction' id='4435147280'&gt;, &lt;MagicMock name='PersistentClient' id='4435145264'&gt;)
newkeywargs = {}

    @wraps(func)
    def patched(*args, **keywargs):
        with self.decoration_helper(patched,
                                    args,
                                    keywargs) as (newargs, newkeywargs):
&gt;           return func(*newargs, **newkeywargs)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E           TypeError: TestVectorStore.test_get_existing_course_titles() takes 2 positional arguments but 3 were given

/opt/homebrew/Cellar/python@3.13/3.13.5/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1426: TypeError</failure></testcase><testcase classname="tests.test_vector_store.TestVectorStore" name="test_get_existing_course_titles_empty" time="0.000"><failure message="TypeError: TestVectorStore.test_get_existing_course_titles_empty() takes 2 positional arguments but 3 were given">args = (&lt;tests.test_vector_store.TestVectorStore object at 0x13812c4b0&gt;,)
keywargs = {}
newargs = (&lt;tests.test_vector_store.TestVectorStore object at 0x13812c4b0&gt;, &lt;MagicMock name='SentenceTransformerEmbeddingFunction' id='5238604528'&gt;, &lt;MagicMock name='PersistentClient' id='5238604864'&gt;)
newkeywargs = {}

    @wraps(func)
    def patched(*args, **keywargs):
        with self.decoration_helper(patched,
                                    args,
                                    keywargs) as (newargs, newkeywargs):
&gt;           return func(*newargs, **newkeywargs)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E           TypeError: TestVectorStore.test_get_existing_course_titles_empty() takes 2 positional arguments but 3 were given

/opt/homebrew/Cellar/python@3.13/3.13.5/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1426: TypeError</failure></testcase><testcase classname="tests.test_vector_store.TestVectorStore" name="test_get_course_count" time="0.000"><failure message="TypeError: TestVectorStore.test_get_course_count() takes 2 positional arguments but 3 were given">args = (&lt;tests.test_vector_store.TestVectorStore object at 0x13829d980&gt;,)
keywargs = {}
newargs = (&lt;tests.test_vector_store.TestVectorStore object at 0x13829d980&gt;, &lt;MagicMock name='SentenceTransformerEmbeddingFunction' id='5320243392'&gt;, &lt;MagicMock name='PersistentClient' id='5320241040'&gt;)
newkeywargs = {}

    @wraps(func)
    def patched(*args, **keywargs):
        with self.decoration_helper(patched,
                                    args,
                                    keywargs) as (newargs, newkeywargs):
&gt;           return func(*newargs, **newkeywargs)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E           TypeError: TestVectorStore.test_get_course_count() takes 2 positional arguments but 3 were given

/opt/homebrew/Cellar/python@3.13/3.13.5/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1426: TypeError</failure></testcase><testcase classname="tests.test_vector_store.TestVectorStore" name="test_get_all_courses_metadata" time="0.000"><failure message="TypeError: TestVectorStore.test_get_all_courses_metadata() takes 2 positional arguments but 3 were given">args = (&lt;tests.test_vector_store.TestVectorStore object at 0x1380a65d0&gt;,)
keywargs = {}
newargs = (&lt;tests.test_vector_store.TestVectorStore object at 0x1380a65d0&gt;, &lt;MagicMock name='SentenceTransformerEmbeddingFunction' id='5320244064'&gt;, &lt;MagicMock name='PersistentClient' id='5320244736'&gt;)
newkeywargs = {}

    @wraps(func)
    def patched(*args, **keywargs):
        with self.decoration_helper(patched,
                                    args,
                                    keywargs) as (newargs, newkeywargs):
&gt;           return func(*newargs, **newkeywargs)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E           TypeError: TestVectorStore.test_get_all_courses_metadata() takes 2 positional arguments but 3 were given

/opt/homebrew/Cellar/python@3.13/3.13.5/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1426: TypeError</failure></testcase><testcase classname="tests.test_vector_store.TestVectorStore" name="test_get_lesson_link" time="0.000"><failure message="TypeError: TestVectorStore.test_get_lesson_link() takes 2 positional arguments but 3 were given">args = (&lt;tests.test_vector_store.TestVectorStore object at 0x1380a62d0&gt;,)
keywargs = {}
newargs = (&lt;tests.test_vector_store.TestVectorStore object at 0x1380a62d0&gt;, &lt;MagicMock name='SentenceTransformerEmbeddingFunction' id='5320241712'&gt;, &lt;MagicMock name='PersistentClient' id='5320244400'&gt;)
newkeywargs = {}

    @wraps(func)
    def patched(*args, **keywargs):
        with self.decoration_helper(patched,
                                    args,
                                    keywargs) as (newargs, newkeywargs):
&gt;           return func(*newargs, **newkeywargs)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E           TypeError: TestVectorStore.test_get_lesson_link() takes 2 positional arguments but 3 were given

/opt/homebrew/Cellar/python@3.13/3.13.5/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1426: TypeError</failure></testcase><testcase classname="tests.test_vector_store.TestVectorStore" name="test_get_lesson_link_not_found" time="0.000"><failure message="TypeError: TestVectorStore.test_get_lesson_link_not_found() takes 2 positional arguments but 3 were given">args = (&lt;tests.test_vector_store.TestVectorStore object at 0x138202f10&gt;,)
keywargs = {}
newargs = (&lt;tests.test_vector_store.TestVectorStore object at 0x138202f10&gt;, &lt;MagicMock name='SentenceTransformerEmbeddingFunction' id='5320234992'&gt;, &lt;MagicMock name='PersistentClient' id='5505756736'&gt;)
newkeywargs = {}

    @wraps(func)
    def patched(*args, **keywargs):
        with self.decoration_helper(patched,
                                    args,
                                    keywargs) as (newargs, newkeywargs):
&gt;           return func(*newargs, **newkeywargs)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E           TypeError: TestVectorStore.test_get_lesson_link_not_found() takes 2 positional arguments but 3 were given

/opt/homebrew/Cellar/python@3.13/3.13.5/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1426: TypeError</failure></testcase><testcase classname="tests.test_vector_store.TestVectorStore" name="test_build_filter_no_filters" time="0.000"><failure message="NameError: name 'mock_embedding_func' is not defined">self = &lt;tests.test_vector_store.TestVectorStore object at 0x138202e60&gt;

    def test_build_filter_no_filters(self):
        """Test filter building with no filters"""
        # Mock embedding function
&gt;       mock_embedding_func.return_value = Mock()
        ^^^^^^^^^^^^^^^^^^^
E       NameError: name 'mock_embedding_func' is not defined

tests/test_vector_store.py:568: NameError</failure></testcase><testcase classname="tests.test_vector_store.TestVectorStore" name="test_build_filter_course_only" time="0.000"><failure message="NameError: name 'mock_embedding_func' is not defined">self = &lt;tests.test_vector_store.TestVectorStore object at 0x138138cd0&gt;

    def test_build_filter_course_only(self):
        """Test filter building with course filter only"""
        # Mock embedding function
&gt;       mock_embedding_func.return_value = Mock()
        ^^^^^^^^^^^^^^^^^^^
E       NameError: name 'mock_embedding_func' is not defined

tests/test_vector_store.py:577: NameError</failure></testcase><testcase classname="tests.test_vector_store.TestVectorStore" name="test_build_filter_lesson_only" time="0.000"><failure message="NameError: name 'mock_embedding_func' is not defined">self = &lt;tests.test_vector_store.TestVectorStore object at 0x138138d70&gt;

    def test_build_filter_lesson_only(self):
        """Test filter building with lesson filter only"""
        # Mock embedding function
&gt;       mock_embedding_func.return_value = Mock()
        ^^^^^^^^^^^^^^^^^^^
E       NameError: name 'mock_embedding_func' is not defined

tests/test_vector_store.py:586: NameError</failure></testcase><testcase classname="tests.test_vector_store.TestVectorStore" name="test_build_filter_both_filters" time="0.000"><failure message="NameError: name 'mock_embedding_func' is not defined">self = &lt;tests.test_vector_store.TestVectorStore object at 0x138111910&gt;

    def test_build_filter_both_filters(self):
        """Test filter building with both filters"""
        # Mock embedding function
&gt;       mock_embedding_func.return_value = Mock()
        ^^^^^^^^^^^^^^^^^^^
E       NameError: name 'mock_embedding_func' is not defined

tests/test_vector_store.py:595: NameError</failure></testcase></testsuite></testsuites>